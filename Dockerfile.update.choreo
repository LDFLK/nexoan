# Update Service Dockerfile
#
# This Dockerfile builds a Ballerina-based update service that communicates with a CRUD service.
#
# Building the Image:
# -----------------
# To build the image, run the following command from the directory containing this Dockerfile:
#   docker build -t update-service -f Dockerfile.update.choreo .
#
# Running the Container:
# ---------------------
# Basic run command:
#   docker run -p 8080:8080 -e CRUD_SERVICE_URL=http://host.docker.internal:8081 update-service
#
# Options:
#   -p 8080:8080                    : Maps container port 8080 to host port 8080
#   -e CRUD_SERVICE_URL=<url>       : URL of the CRUD service to connect to
#   -d                              : Run in detached mode (background)
#   --name update-service-container : Assign a name to the container
#
# Examples:
# 1. Run in detached mode:
#    docker run -d -p 8080:8080 -e CRUD_SERVICE_URL=http://host.docker.internal:8081 update-service
#
# 2. Run with custom port mapping:
#    docker run -p 9090:8080 -e CRUD_SERVICE_URL=http://host.docker.internal:8081 update-service
#
# 3. Run with additional JVM options:
#    docker run -p 8080:8080 \
#      -e CRUD_SERVICE_URL=http://host.docker.internal:8081 \
#      -e JAVA_OPTS="-Xmx512m" \
#      update-service
#
# 4. Run with container name and restart policy:
#    docker run -d \
#      --name update-service-container \
#      --restart unless-stopped \
#      -p 8080:8080 \
#      -e CRUD_SERVICE_URL=http://host.docker.internal:8081 \
#      update-service
#
# Environment Variables:
# ---------------------
# CRUD_SERVICE_URL: URL of the CRUD service (required)
#   Format: http://<host>:<port>
#   Example: http://host.docker.internal:8081
#
# JAVA_OPTS: JVM options (optional)
#   Example: -Xmx512m -XX:+UseContainerSupport
#
# Notes:
# ------
# - The service runs on port 8080 inside the container
# - The container uses a non-root user (choreouser) for security
# - The service waits for the CRUD service to be available before starting
# - Use host.docker.internal to connect to services running on the host machine
#
# Troubleshooting:
# ---------------
# 1. If the service can't connect to the CRUD service:
#    - Verify the CRUD_SERVICE_URL is correct
#    - Check if the CRUD service is running and accessible
#    - Ensure the port mapping is correct
#
# 2. If the service fails to start:
#    - Check the container logs: docker logs <container-id>
#    - Verify all required environment variables are set
#    - Ensure the ports are not already in use

# Build stage for Update service
FROM --platform=linux/amd64 ballerina/ballerina:2201.11.0 AS builder

# Set working directory
WORKDIR /app

# Copy the source code
COPY . .

# Switch to root for package installation and user creation
USER root

# Install shadow package and create user/group
RUN apk add --no-cache shadow && \
    groupadd -g 10014 choreo && \
    useradd -u 10014 -g choreo -s /bin/bash -m choreouser && \
    mkdir -p /home/choreouser/.cache/go-build && \
    chown -R choreouser:choreo /home/choreouser && \
    chmod -R 755 /home/choreouser

# Install runtime dependencies
RUN apk add --no-cache ca-certificates netcat-openbsd dos2unix

# Create and set permissions for build directories
RUN mkdir -p /app/design/update-api/target && \
    chown -R choreouser:choreo /app && \
    chmod -R 755 /app

# Switch to non-root user for building
USER 10014

# Build the application with explicit platform settings
# ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
# Build the Ballerina service
RUN cd design/update-api && \
    bal build

# Final stage
FROM --platform=linux/amd64 ballerina/ballerina:2201.11.0

# Switch to root for package installation
USER root

# Install runtime dependencies and create user
RUN apk add --no-cache ca-certificates netcat-openbsd dos2unix shadow && \
    groupadd -g 10014 choreo && \
    useradd -u 10014 -g choreo -s /bin/bash -m choreouser

# Create necessary directories with proper permissions
RUN mkdir -p /home/choreouser/.cache/go-build && \
    mkdir -p /home/choreouser/.ballerina && \
    mkdir -p /tmp/ballerina && \
    chown -R choreouser:choreo /home/choreouser && \
    chmod -R 755 /home/choreouser && \
    chown -R choreouser:choreo /tmp/ballerina && \
    chmod -R 755 /tmp/ballerina

# Copy the source code and build artifacts
COPY --from=builder /app/design/update-api /app/design/update-api
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Create startup script with proper line endings
RUN printf '#!/bin/sh\n\
# Verify required environment variables\n\
if [ -z "$CRUD_SERVICE_URL" ]; then\n\
    echo "Error: CRUD_SERVICE_URL environment variable is not set"\n\
    exit 1\n\
fi\n\
if [ -z "$UPDATE_SERVICE_HOST" ]; then\n\
    echo "Error: UPDATE_SERVICE_HOST environment variable is not set"\n\
    exit 1\n\
fi\n\
if [ -z "$UPDATE_SERVICE_PORT" ]; then\n\
    echo "Error: UPDATE_SERVICE_PORT environment variable is not set"\n\
    exit 1\n\
fi\n\
\n\
echo "Starting update service with CRUD_SERVICE_URL: $CRUD_SERVICE_URL and UPDATE_SERVICE_HOST: $UPDATE_SERVICE_HOST and UPDATE_SERVICE_PORT: $UPDATE_SERVICE_PORT"\n\
\n\
# Set Ballerina home to a writable directory\n\
export BALLERINA_HOME=/tmp/ballerina\n\
\n\
# Start the service with explicit platform settings\n\
exec bal run /app/design/update-api\n' > /app/start.sh && \
    chmod +x /app/start.sh && \
    dos2unix /app/start.sh

# Set permissions
RUN chown -R choreouser:choreo /home/choreouser && \
    chmod -R 755 /home/choreouser && \
    chown -R choreouser:choreo /app && \
    chmod -R 755 /app

# Switch to non-root user for running the service
USER 10014

# Expose ports
EXPOSE 8080

# Set the entrypoint
ENTRYPOINT ["/app/start.sh"]