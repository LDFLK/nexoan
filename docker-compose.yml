version: '3.8'

services:
  mongodb:
    platform: linux/amd64
    image: mongo:4.4
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ldf-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  neo4j:
    platform: linux/amd64
    image: neo4j:5.12.0
    container_name: neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - ldf-network
    environment:
      - NEO4J_AUTH=neo4j/neo4j123
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    platform: linux/amd64
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ldf-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nexoan
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  crud:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.crud
      args:
        - DOCKER_DEFAULT_PLATFORM=linux/amd64
    container_name: crud
    ports:
      - "50051:50051"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j123
      - MONGO_URI=mongodb://admin:admin123@mongodb:27017/admin?authSource=admin
      - MONGO_DB_NAME=testdb
      - MONGO_COLLECTION=metadata
      - MONGO_ADMIN_USER=admin
      - MONGO_ADMIN_PASSWORD=admin123
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nexoan
      - POSTGRES_SSL_MODE=disable
      - CRUD_SERVICE_HOST=0.0.0.0
      - CRUD_SERVICE_PORT=50051
    depends_on:
      mongodb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ldf-network
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "50051"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 120s

  update:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.update
    container_name: update
    ports:
      - "8080:8080"
    networks:
      - ldf-network
    environment:
      - CRUD_SERVICE_URL=http://crud:50051
      - UPDATE_SERVICE_HOST=0.0.0.0
      - UPDATE_SERVICE_PORT=8080
    depends_on:
      crud:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 120s

  query:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.query
    container_name: query
    ports:
      - "8081:8081"
    networks:
      - ldf-network
    environment:
      - CRUD_SERVICE_URL=http://crud:50051
      - QUERY_SERVICE_HOST=0.0.0.0
      - QUERY_SERVICE_PORT=8081
    depends_on:
      crud:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "8081"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 120s

  e2e:
    platform: linux/amd64
    image: python:3.9-slim
    container_name: e2e
    volumes:
      - ./nexoan/tests/e2e:/app/tests
    working_dir: /app/tests
    networks:
      - ldf-network
    environment:
      - PYTHONUNBUFFERED=1
      - UPDATE_SERVICE_URL=http://update:8080
      - QUERY_SERVICE_URL=http://query:8081
    depends_on:
      update:
        condition: service_healthy
      query:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        pip install requests &&
        python3 basic_crud_tests.py &&
        python3 basic_query_tests.py"

networks:
  ldf-network:
    driver: bridge

volumes:
  mongodb_data:
  neo4j_data:
  neo4j_logs:
  postgres_data: 

