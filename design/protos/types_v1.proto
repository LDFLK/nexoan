syntax = "proto3";

package crud;

// Import necessary types
import "google/protobuf/any.proto";

option go_package = "lk/datafoundation/crud-api";


message Kind {
    string major = 1;
    string minor = 2;
}

message TimeBasedValue {
    string startTime = 1;
    string endTime = 2;
    google.protobuf.Any value = 3; // Storing any type of value
}

message Relationship {
    string relatedEntityId = 1;
    string startTime = 2;
    string endTime = 3;
    string id = 4;
    string name = 5;
}

message Entity {
    string id = 1; // Read-only unique identifier
    Kind kind = 2; // Read-only entity type
    string created = 3; // Read-only created timestamp
    string terminated = 4; // Nullable terminated timestamp
    TimeBasedValue name = 5;
    map<string, google.protobuf.Any> metadata = 6; // Metadata as a flexible key-value map
    map<string, TimeBasedValueList> attributes = 7; // Attributes as a time-based list
    map<string, Relationship> relationships = 8; // Relationships to other entities
}

// Wrapper for a repeated TimeBasedValue (since Protobuf does not support nested lists in maps)
message TimeBasedValueList {
    repeated TimeBasedValue values = 1;
}

// Request message for reading an entity
message ReadEntityRequest {
    Entity entity = 1;
    repeated string output = 2;  // Specifies which parts of the entity to return
}

// Service definition for CRUD operations
service CrudService {
    rpc CreateEntity(Entity) returns (Entity);
    rpc ReadEntity(ReadEntityRequest) returns (Entity);
    rpc UpdateEntity(UpdateEntityRequest) returns (Entity);
    rpc DeleteEntity(EntityId) returns (Empty);
}

// Request message for deleting an entity by ID
message EntityId {
    string id = 1;
}

// Request message for updating an entity
message UpdateEntityRequest {
    string id = 1;
    Entity entity = 2;
}

// Empty message response
message Empty {}
