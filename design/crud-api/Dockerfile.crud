# Dockerfile.crud
#
# Purpose:
# This Dockerfile builds and runs the CRUD API service, which provides a gRPC interface
# for creating, reading, updating, and deleting entities in the system. The service
# connects to both Neo4j (for graph relationships) and MongoDB (for metadata storage).
#
# Usage:
# 1. Build the image:
#    docker build -t crud-service -f Dockerfile.crud .
#
# 2. Run the container:
#    docker run -d \
#      --name crud-service \
#      --network crud-network \
#      -p 50051:50051 \
#      -e NEO4J_URI=bolt://neo4j-local:7687 \
#      -e NEO4J_USER=${NEO4J_USER} \
#      -e NEO4J_PASSWORD=${NEO4J_PASSWORD} \
#      -e MONGO_URI=${MONGO_URI} \
#      crud-service
#
# Environment Variables:
# - NEO4J_URI: Connection URI for Neo4j database (default: bolt://neo4j:7687)
# - NEO4J_USER: Username for Neo4j authentication (default: neo4j)
# - NEO4J_PASSWORD: Password for Neo4j authentication (default: neo4j123)
# - MONGO_URI: Connection URI for MongoDB (default: mongodb://mongo:27017)
# - MONGO_DB_NAME: MongoDB database name (default: testdb)
# - MONGO_COLLECTION: MongoDB collection name (default: metadata)
# - MONGO_ADMIN_USER: MongoDB admin username (default: admin)
# - MONGO_ADMIN_PASSWORD: MongoDB admin password (default: test123456)
# - CRUD_SERVICE_HOST: Host address to bind the service (default: 0.0.0.0)
# - CRUD_SERVICE_PORT: Port to expose the gRPC service (default: 50051)
#
# Note: This service should be run on the same Docker network as Neo4j and MongoDB
# services for proper connectivity. Use the 'crud-network' created with:
# docker network create crud-network


# Build stage for CRUD service
FROM golang:1.24 AS builder

# Set working directory
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies
RUN go mod download

# Create a new user with UID 10014
RUN addgroup -g 10014 choreo && \
    adduser  --disabled-password  --no-create-home --uid 10014 --ingroup choreo choreouser

# Copy the source code
COPY . .

# Build the application
RUN go build -o crud-service cmd/server/service.go cmd/server/utils.go

# Final stage
FROM golang:1.24

# Copy the built binary from builder stage
COPY --from=builder /app/crud-service /usr/local/bin/

# Set environment variables with defaults for Neo4j connection
# Note: When running in Docker, use the service name 'neo4j' if both services are in the same network
ENV NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
ENV NEO4J_USER=${NEO4J_USER:-neo4j}
ENV NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j123}

# Set MongoDB environment variables with defaults
ENV MONGO_URI=${MONGO_URI:-mongodb://mongo:27017}
ENV MONGO_DB_NAME=${MONGO_DB_NAME:-testdb}
ENV MONGO_COLLECTION=${MONGO_COLLECTION:-metadata}
ENV MONGO_ADMIN_USER=${MONGO_ADMIN_USER:-admin}
ENV MONGO_ADMIN_PASSWORD=${MONGO_ADMIN_PASSWORD:-test123456}

# Set CRUD service environment variables
ENV CRUD_SERVICE_HOST=${CRUD_SERVICE_HOST:-0.0.0.0}
ENV CRUD_SERVICE_PORT=${CRUD_SERVICE_PORT:-50051}

USER 10014

# Expose ports
EXPOSE 50051

# Display environment variables and start the service
CMD echo "Environment Variables:" && \
    echo "NEO4J_URI: $NEO4J_URI" && \
    echo "NEO4J_USER: $NEO4J_USER" && \
    echo "NEO4J_PASSWORD: ********" && \
    echo "MONGO_URI: $MONGO_URI" && \
    echo "MONGO_DB_NAME: $MONGO_DB_NAME" && \
    echo "MONGO_COLLECTION: $MONGO_COLLECTION" && \
    echo "MONGO_ADMIN_USER: $MONGO_ADMIN_USER" && \
    echo "MONGO_ADMIN_PASSWORD: ********" && \
    echo "CRUD_SERVICE_HOST: $CRUD_SERVICE_HOST" && \
    echo "CRUD_SERVICE_PORT: $CRUD_SERVICE_PORT" && \
    echo "Starting CRUD service..." && \
    exec crud-service
