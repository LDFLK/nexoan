// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: types_v1.proto

package crud_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrudService_CreateEntity_FullMethodName = "/crud.CrudService/CreateEntity"
	CrudService_ReadEntity_FullMethodName   = "/crud.CrudService/ReadEntity"
	CrudService_ReadEntities_FullMethodName = "/crud.CrudService/ReadEntities"
	CrudService_UpdateEntity_FullMethodName = "/crud.CrudService/UpdateEntity"
	CrudService_DeleteEntity_FullMethodName = "/crud.CrudService/DeleteEntity"
)

// CrudServiceClient is the client API for CrudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for CRUD operations
type CrudServiceClient interface {
	CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	ReadEntity(ctx context.Context, in *ReadEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	ReadEntities(ctx context.Context, in *ReadEntityRequest, opts ...grpc.CallOption) (*EntityList, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*Entity, error)
	DeleteEntity(ctx context.Context, in *EntityId, opts ...grpc.CallOption) (*Empty, error)
}

type crudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudServiceClient(cc grpc.ClientConnInterface) CrudServiceClient {
	return &crudServiceClient{cc}
}

func (c *crudServiceClient) CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, CrudService_CreateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadEntity(ctx context.Context, in *ReadEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, CrudService_ReadEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadEntities(ctx context.Context, in *ReadEntityRequest, opts ...grpc.CallOption) (*EntityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityList)
	err := c.cc.Invoke(ctx, CrudService_ReadEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, CrudService_UpdateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) DeleteEntity(ctx context.Context, in *EntityId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CrudService_DeleteEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServiceServer is the server API for CrudService service.
// All implementations must embed UnimplementedCrudServiceServer
// for forward compatibility.
//
// Service definition for CRUD operations
type CrudServiceServer interface {
	CreateEntity(context.Context, *Entity) (*Entity, error)
	ReadEntity(context.Context, *ReadEntityRequest) (*Entity, error)
	ReadEntities(context.Context, *ReadEntityRequest) (*EntityList, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*Entity, error)
	DeleteEntity(context.Context, *EntityId) (*Empty, error)
	mustEmbedUnimplementedCrudServiceServer()
}

// UnimplementedCrudServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrudServiceServer struct{}

func (UnimplementedCrudServiceServer) CreateEntity(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedCrudServiceServer) ReadEntity(context.Context, *ReadEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEntity not implemented")
}
func (UnimplementedCrudServiceServer) ReadEntities(context.Context, *ReadEntityRequest) (*EntityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEntities not implemented")
}
func (UnimplementedCrudServiceServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedCrudServiceServer) DeleteEntity(context.Context, *EntityId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedCrudServiceServer) mustEmbedUnimplementedCrudServiceServer() {}
func (UnimplementedCrudServiceServer) testEmbeddedByValue()                     {}

// UnsafeCrudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServiceServer will
// result in compilation errors.
type UnsafeCrudServiceServer interface {
	mustEmbedUnimplementedCrudServiceServer()
}

func RegisterCrudServiceServer(s grpc.ServiceRegistrar, srv CrudServiceServer) {
	// If the following call pancis, it indicates UnimplementedCrudServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrudService_ServiceDesc, srv)
}

func _CrudService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).CreateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_ReadEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadEntity(ctx, req.(*ReadEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_ReadEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadEntities(ctx, req.(*ReadEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).DeleteEntity(ctx, req.(*EntityId))
	}
	return interceptor(ctx, in, info, handler)
}

// CrudService_ServiceDesc is the grpc.ServiceDesc for CrudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crud.CrudService",
	HandlerType: (*CrudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _CrudService_CreateEntity_Handler,
		},
		{
			MethodName: "ReadEntity",
			Handler:    _CrudService_ReadEntity_Handler,
		},
		{
			MethodName: "ReadEntities",
			Handler:    _CrudService_ReadEntities_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _CrudService_UpdateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _CrudService_DeleteEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types_v1.proto",
}
