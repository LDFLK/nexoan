name: Update API Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
    services:
      neo4j:
        image: neo4j:5
        ports:
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/test123456
        options: >-
          --health-cmd "wget -q --spider http://localhost:7474 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Install required dependencies
      run: |
        apt-get update
        apt-get install -y wget gnupg python3 python3-pip golang-go netcat-openbsd curl

    - name: Install Ballerina
      run: |
        wget https://dist.ballerina.io/downloads/2201.12.2/ballerina-2201.12.2-swan-lake-linux-x64.deb
        dpkg -i ballerina-2201.12.2-swan-lake-linux-x64.deb || true
        apt-get install -f -y

    - name: Set up Database Environment Variables
      run: |
        echo "NEO4J_URI=bolt://neo4j:7687" >> $GITHUB_ENV
        echo "NEO4J_USER=neo4j" >> $GITHUB_ENV
        echo "NEO4J_PASSWORD=test123456" >> $GITHUB_ENV
        echo "MONGO_URI=mongodb://mongo:27017" >> $GITHUB_ENV
        echo "MONGO_DB_NAME=testdb" >> $GITHUB_ENV
        echo "MONGO_COLLECTION=entities" >> $GITHUB_ENV
        echo "CRUD_SERVICE_HOST=0.0.0.0" >> $GITHUB_ENV
        echo "UPDATE_SERVICE_HOST=0.0.0.0" >> $GITHUB_ENV
        echo "CRUD_SERVICE_PORT=50051" >> $GITHUB_ENV
        echo "UPDATE_SERVICE_PORT=8080" >> $GITHUB_ENV

    - name: Run CRUD Server
      shell: bash -l {0}
      run: |
        cd design/crud-api
        go build ./...
        go build -o crud-service cmd/server/service.go cmd/server/utils.go
        go test -v ./...
        # Start the service with environment variables
        CRUD_SERVICE_HOST=0.0.0.0 CRUD_SERVICE_PORT=50051 ./crud-service &
        echo $! > crud-service.pid
        # Wait for the service to be ready
        for i in {1..30}; do
          if nc -z 0.0.0.0 50051; then
            echo "CRUD service is up and running"
            # Additional wait to ensure service is fully initialized
            sleep 5
            # Verify service is responding
            echo "Testing CRUD service connection..."
            curl -v http://0.0.0.0:50051/health || true
            echo "CRUD service health check completed"
            break
          fi
          echo "Waiting for CRUD service to start... ($i/30)"
          sleep 1
        done
        if ! nc -z 0.0.0.0 50051; then
          echo "CRUD service failed to start"
          echo "Checking service logs:"
          cat crud-service.log || true
          exit 1
        fi
        echo "CRUD service is ready for tests"
    
    - name: Test Update API
      shell: bash -l {0}
      run: |
        cd design/update-api
        # Run tests and capture the exit code
        echo "CRUD_SERVICE_HOST=$CRUD_SERVICE_HOST"
        echo "CRUD_SERVICE_PORT=$CRUD_SERVICE_PORT"
        echo "UPDATE_SERVICE_HOST=$UPDATE_SERVICE_HOST"
        echo "UPDATE_SERVICE_PORT=$UPDATE_SERVICE_PORT"
        bal test || TEST_EXIT_CODE=$?
        # Store the exit code for later use
        echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_ENV
        cd ../crud-api
        kill $(cat crud-service.pid)
        # Exit with the test exit code to ensure workflow fails if tests failed
        exit ${TEST_EXIT_CODE:-0}

    - name: Check Test Results
      if: failure()
      run: |
        echo "Tests failed with exit code: $TEST_EXIT_CODE"
        echo "Please check the test output above for details."