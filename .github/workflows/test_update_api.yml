name: Update API Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - uses: actions/checkout@v3

    - name: Install required dependencies
      run: |
        apt-get update
        apt-get install -y wget gnupg systemd python3 python3-pip golang-go netcat

    - name: Install Neo4j
      run: |
        wget -O - https://debian.neo4j.com/neotechnology.gpg.key | apt-key add -
        echo 'deb https://debian.neo4j.com stable latest' | tee /etc/apt/sources.list.d/neo4j.list
        apt-get update
        apt-get install -y neo4j

    - name: Install MongoDB
      run: |
        wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        apt-get update
        apt-get install -y mongodb-org

    - name: Install Ballerina
      run: |
        wget https://dist.ballerina.io/downloads/2201.12.2/ballerina-2201.12.2-swan-lake-linux-x64.deb
        dpkg -i ballerina-2201.12.2-swan-lake-linux-x64.deb || true
        apt-get install -f -y

    - name: Start Services
      run: |
        # Start Neo4j
        systemctl start neo4j
        # Start MongoDB
        systemctl start mongod
        # Wait for services to be ready
        sleep 10

    - name: Set up Database Environment Variables
      run: |
        echo "NEO4J_URI=bolt://localhost:7687" >> $GITHUB_ENV
        echo "NEO4J_USER=neo4j" >> $GITHUB_ENV
        echo "NEO4J_PASSWORD=test123456" >> $GITHUB_ENV
        echo "MONGO_URI=mongodb://localhost:27017" >> $GITHUB_ENV
        echo "MONGO_DB_NAME=testdb" >> $GITHUB_ENV
        echo "MONGO_COLLECTION=entities" >> $GITHUB_ENV

    - name: Run CRUD Server
      run: |
        cd design/crud-api
        go build ./...
        go build -o crud-service cmd/server/service.go cmd/server/utils.go
        ./crud-service &
        echo $! > crud-service.pid

        # Wait for server to be up
        echo "Waiting for crud-service to be ready..."
        for i in {1..30}; do
          if nc -z localhost 50051; then
            echo "crud-service is up!"
            break
          fi
          echo "Still waiting for crud-service..."
          sleep 1
        done

    - name: Test Update API
      shell: bash -l {0}
      run: |
        cd design/update-api
        bal test
        cd ../crud-api
        kill $(cat crud-service.pid)

    - name: Cleanup
      if: always()
      run: |
        if [ -f crud-service.pid ]; then
          kill $(cat crud-service.pid) || true
          rm crud-service.pid
        fi
        systemctl stop neo4j
        systemctl stop mongod