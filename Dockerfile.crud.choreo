# Dockerfile.crud.choreo
#
# Purpose:
# This Dockerfile builds and runs the CRUD API service, which provides a gRPC interface
# for creating, reading, updating, and deleting entities in the system. The service
# connects to both Neo4j (for graph relationships) and MongoDB (for metadata storage).
#
# Usage:
# 1. Build the image:
#    # For ARM64 (Apple Silicon):
#    docker build --platform linux/arm64 -t crud-service -f Dockerfile.crud.choreo .
#    # For AMD64:
#    docker build --platform linux/amd64 -t crud-service -f Dockerfile.crud.choreo .
#
# 2. Run the container (REQUIRED environment variables):
#   docker run -d \
#     --name crud-service-choreo \
#     -p 50051:50051 \
#     -e NEO4J_URI="neo4j+s://f6451f05.databases.neo4j.io" \
#     -e NEO4J_USER=neo4j \
#     -e NEO4J_PASSWORD="5hnuZy7fq8du9Mx6IB8pvdFGPoJSBF3soaXLw-idhVE" \
#     -e MONGO_URI="mongodb+srv://vibhatha:13b0zAEEd5mNINbA@ldfcluster001.zxegv.mongodb.net/?retryWrites=true&w=majority&appName=LDFCLUSTER001" \
#     -e MONGO_DB_NAME=testdb \
#     -e MONGO_COLLECTION=metadata \
#     -e MONGO_ADMIN_USER=admin \
#     -e MONGO_ADMIN_PASSWORD=admin123 \
#     -e CRUD_SERVICE_HOST=0.0.0.0 \
#     -e CRUD_SERVICE_PORT=50051 \
#     crud-service-choreo
#
# Required Environment Variables (must be provided at runtime):
# - NEO4J_URI: Connection URI for Neo4j database (e.g., bolt://neo4j:7687)
# - NEO4J_USER: Username for Neo4j authentication
# - NEO4J_PASSWORD: Password for Neo4j authentication
# - MONGO_URI: Connection URI for MongoDB (e.g., mongodb://admin:admin123@mongodb:27017/admin?authSource=admin)
# - MONGO_DB_NAME: MongoDB database name
# - MONGO_COLLECTION: MongoDB collection name
# - MONGO_ADMIN_USER: MongoDB admin username
# - MONGO_ADMIN_PASSWORD: MongoDB admin password
# - CRUD_SERVICE_HOST: Host address to bind the service
# - CRUD_SERVICE_PORT: Port to expose the gRPC service
#
# Note: The service must be run on the ldf-network to communicate with Neo4j and MongoDB services.
# The hostnames 'neo4j' and 'mongodb' are resolved within the ldf-network.

# Build stage for CRUD service
FROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.23 AS builder

# Set working directory
WORKDIR /app

# Copy the source code
COPY . .

## Create a new user with UID 10014 and set up directories
RUN groupadd -g 10014 choreo && \
    useradd -u 10014 -g choreo -s /bin/bash -m choreouser && \
    mkdir -p /home/choreouser/.cache/go-build && \
    chown -R choreouser:choreo /home/choreouser && \
    chmod -R 755 /home/choreouser

# Download dependencies
RUN cd design/crud-api && \
    go mod download

# Build the application
RUN cd design/crud-api && \
    go build -o crud-service cmd/server/service.go cmd/server/utils.go

# Final stage
FROM --platform=${TARGETPLATFORM:-linux/amd64} golang:1.24

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Copy the built binary from builder stage
COPY --from=builder /app/design/crud-api/crud-service /usr/local/bin/
COPY --from=builder /app/design/crud-api /app/design/crud-api
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Add log configuration
ENV LOG_LEVEL=debug
ENV LOG_FORMAT=text

# Create necessary directories and set permissions
RUN mkdir -p /home/choreouser/.cache/go-build && \
    chown -R choreouser:choreo /home/choreouser && \
    chmod -R 755 /home/choreouser && \
    chown -R choreouser:choreo /app && \
    chmod -R 755 /app

USER 10014

# Expose ports
EXPOSE 50051

# Set the entrypoint to run the service directly
ENTRYPOINT ["crud-service"] 