# Dockerfile.crud.choreo
#
# Purpose:
# This Dockerfile builds and runs the CRUD API service, which provides a gRPC interface
# for creating, reading, updating, and deleting entities in the system. The service
# connects to both Neo4j (for graph relationships) and MongoDB (for metadata storage).
#
# Usage:
# 1. Build the image:
#    # For ARM64 (Apple Silicon):
#    docker build --platform linux/arm64 -t crud-service -f Dockerfile.crud.choreo .
#    # For AMD64:
#    docker build --platform linux/amd64 -t crud-service -f Dockerfile.crud.choreo .
#
# 2. Run the container (REQUIRED environment variables):
#   docker run -d \
#     --name crud-service-choreo \
#     -p 50051:50051 \
#     -e NEO4J_URI="neo4j+s://your-neo4j-instance.databases.neo4j.io" \
#     -e NEO4J_USER="your-neo4j-username" \
#     -e NEO4J_PASSWORD="your-neo4j-password" \
#     -e MONGO_URI="mongodb+srv://username:password@your-cluster.mongodb.net/?retryWrites=true&w=majority" \
#     -e MONGO_DB_NAME="your-mongo-db-name" \
#     -e MONGO_COLLECTION="your-mongo-collection-name" \
#     -e MONGO_ADMIN_USER="your-mongo-admin-username" \
#     -e MONGO_ADMIN_PASSWORD="your-mongo-admin-password" \
#     -e POSTGRES_PORT=5432 \
#     -e POSTGRES_USER=postgres \
#     -e POSTGRES_PASSWORD=postgres \
#     -e POSTGRES_DB=nexoan \
#     -e POSTGRES_SSL_MODE=disable \
#     -e POSTGRES_TEST_DB_URI="" \
#     -e CRUD_SERVICE_HOST=0.0.0.0 \
#     -e CRUD_SERVICE_PORT=50051 \
#     crud-service-choreo
#
# Required Environment Variables (must be provided at runtime):
# - NEO4J_URI: Connection URI for Neo4j database (e.g., neo4j+s://your-instance.databases.neo4j.io)
# - NEO4J_USER: Username for Neo4j authentication
# - NEO4J_PASSWORD: Password for Neo4j authentication
# - MONGO_URI: Connection URI for MongoDB (e.g., mongodb+srv://username:password@your-cluster.mongodb.net/?retryWrites=true&w=majority)
# - MONGO_DB_NAME: MongoDB database name
# - MONGO_COLLECTION: MongoDB collection name
# - MONGO_ADMIN_USER: MongoDB admin username
# - MONGO_ADMIN_PASSWORD: MongoDB admin password
# - POSTGRES_PORT: PostgreSQL port (default: 5432)
# - POSTGRES_USER: PostgreSQL username (default: postgres)
# - POSTGRES_PASSWORD: PostgreSQL password (default: postgres)
# - POSTGRES_DB: PostgreSQL database name (default: nexoan)
# - POSTGRES_SSL_MODE: PostgreSQL SSL mode (default: disable)
# - POSTGRES_TEST_DB_URI: PostgreSQL test database URI (optional)
# - CRUD_SERVICE_HOST: Host address to bind the service
# - CRUD_SERVICE_PORT: Port to expose the gRPC service
#
# Note: The service must be run on the ldf-network to communicate with Neo4j and MongoDB services.
# The hostnames 'neo4j' and 'mongodb' are resolved within the ldf-network.

# Build stage for CRUD service
FROM --platform=${BUILDPLATFORM:-linux/amd64} golang:1.23 AS builder

# Set working directory
WORKDIR /app

# Copy the source code
COPY . .

## Create a new user with UID 10014 and set up directories
RUN groupadd -g 10014 choreo && \
    useradd -u 10014 -g choreo -s /bin/bash -m choreouser && \
    mkdir -p /home/choreouser/.cache/go-build && \
    chown -R choreouser:choreo /home/choreouser && \
    chmod -R 755 /home/choreouser

# Download dependencies
RUN cd nexoan/crud-api && \
    go mod download

# Build the application as a static binary
RUN cd nexoan/crud-api && \
    CGO_ENABLED=0 GOOS=linux go build -a -ldflags '-extldflags "-static"' -o crud-service cmd/server/service.go cmd/server/utils.go

# Final stage
FROM --platform=${TARGETPLATFORM:-linux/amd64} golang:1.24

# Install runtime dependencies and database client tools
RUN apt-get update && \
    apt-get install -y ca-certificates qemu-user-static gnupg curl wget unzip default-jdk postgresql-client netcat-openbsd && \
    # Add MongoDB repository
    curl -fsSL https://pgp.mongodb.com/server-6.0.asc | \
    gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor && \
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/debian bullseye/mongodb-org/6.0 main" | \
    tee /etc/apt/sources.list.d/mongodb-org-6.0.list && \
    apt-get update && \
    apt-get install -y mongodb-mongosh && \
    # Download and install Cypher Shell
    wget https://dist.neo4j.org/cypher-shell/cypher-shell-5.26.5.zip && \
    unzip cypher-shell-5.26.5.zip && \
    mkdir -p /usr/local/lib/cypher-shell && \
    mv cypher-shell-5.26.5/lib/* /usr/local/lib/cypher-shell/ && \
    # Create a wrapper script with proper classpath
    echo '#!/bin/sh\n\
    CLASSPATH=$(find /usr/local/lib/cypher-shell -name "*.jar" | tr "\\n" ":")\n\
    exec java -cp "$CLASSPATH" org.neo4j.shell.Main "$@"\n\
    ' > /usr/local/bin/cypher-shell && \
    chmod +x /usr/local/bin/cypher-shell && \
    rm -rf cypher-shell-5.26.5.zip cypher-shell-5.26.5 && \
    rm -rf /var/lib/apt/lists/*

# Set Java environment variables
ENV JAVA_HOME=/usr/lib/jvm/default-java
ENV PATH=$JAVA_HOME/bin:$PATH

# Copy the built binary to PATH and the entire crud-api directory
COPY --from=builder /app/nexoan/crud-api/crud-service /usr/local/bin/
COPY --from=builder /app/nexoan/crud-api /app/nexoan/crud-api
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy the Choreo-specific startup script
COPY crud_startup-choreo.sh /app/start.sh
RUN chmod +x /app/start.sh

# Add log configuration
ENV LOG_LEVEL=debug
ENV LOG_FORMAT=text

# Set Go build cache environment variable
ENV GOCACHE=/home/choreouser/.cache/go-build

# Create necessary directories and set permissions
RUN mkdir -p /home/choreouser/.cache/go-build && \
    mkdir -p /home/choreouser/.cache/go-build/00 && \
    chown -R choreouser:choreo /home/choreouser && \
    chmod -R 755 /home/choreouser && \
    chmod -R 777 /home/choreouser/.cache && \
    chown -R choreouser:choreo /app && \
    chmod -R 755 /app

USER 10014

# Expose ports
EXPOSE 50051

# The startup script is now copied from crud_startup.sh
# Display environment variables and start the service
CMD ["/app/start.sh"]
